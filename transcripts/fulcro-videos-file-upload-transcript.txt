Really quick demo of the file upload support that I've just added in foco, version three, zero 10. To make it seamless to do file uploads, in parallel with mutations so that things go to get cleaned this up a bit. So the UI can look very, very simple. So here I've got a form, I've got a couple of file pickers, these can be multiple or single. And you can see over here in these in these input fields for like the avatar, I'm doing accept, and then I'm using the on change event, the file upload support has this helper function that will convert an event into a list of files that can be uploaded, the support always assumes you can send multiple files. So it's always plural, even though even if you're just sending one, I'm going to throw that in component local state just to hold on to it because I'm kind of building up the form here. And I've already selected a couple of files. And then on my transaction, I'd like to have just a couple of mutations where I can pass parameters. And I can also attach uploads to those parameters so that those uploads go with this particular mutation. So I'd like this file, the missing JPEG to go to save settings. And I'd like the apprenticeship guide to go to publish Manifesto. I'd also like to be able to board this in case it's slow. So I'm adding an aboard ID to the parameters of transact. And I'd also like to watch progress, progress is automatic. You just have to track it and put it in an app state somewhere so you can see it. So I'm making a little progress bar here. That's using the current progress of the safe. And I'm just adding these two to my query. So up here, I've got a UI progress. And my query, my ident is component ID settings. And I've turned on the data fetch marker table, what I'm gonna do is I'm going to I'm going to in my mutation, use the data fetch support marker support. To just indicate that things are happening as a kind of a Boolean, you don't have to do that you could use your own flag, but you'll see in just a second, so then the client mutation, all it has to have technically is remote. True. All the rest of this stuff is is about the progress. So there's, there's nothing, you know, none of that stuff is necessary for this file upload support. This extra stuff that I've added in here, you can see public manifesto is just remote true, is just to set the load marker and remove the load marker, or set the load marker to failed. If there's a failure, and then the progress action, this is a section you can always specify in your mutations, and this will receive pings as the network, progress happens. And you can just pull things like overall progress out of the environment, to get a number here that you can throw into your state to then modify things. It's it's a lot of little pieces, but the file upload part remote true is all you need. Now you do have to add middleware to your client. So in the client here, I've just added this rap file, upload to my secured rest middleware here, and then added that to the HTTP remote. So this middleware adds the support for attaching the files. And of course, the same thing on the server, the middleware server, the server, middleware needs to have this wrapped mutation file uploads just before API, but after, in this case, we're app defaults. Were where I've got keyword eyes, multipart nested in URL encoded params, all turned on. In the normal ring middleware, I think multi parts, the only one that's absolutely necessary for this to work. So you need to have multi part, ring middleware here, API appear. These this in the middle. Now, you're going to see that when I submit this, I think I've covered all the bits of actual code. When I submit this, I get to see a single post. Right, so there's the API. These other words were, were the worker files for there must have been a shadow update. But there's my one API post, you can see the transaction gets encoded in there, and the two files get added. And then over here on the server, the server side mutations for settings need to do nothing more than just find the file uploads at the file, upload namespaced key files. And if you only expect one, then just do first, right and there's your file. So it gets either the result here the manifesto came in. The Avatar came in just normal ring temporary files. And of course, I also got my, my normal parameters, merge together with those.

So then, just to demo that the cancel works, I can drop my network speed down here in Chrome, hit Save If we can see the progress going, I can hit cancel. and here if I do that again it's going. So I guess I should do should be a little quicker about hitting cancel, save, cancel, and you see nothing happens on the server. Down here you can see that I'm the network requests are being canceled. So that's it, file upload, support.

